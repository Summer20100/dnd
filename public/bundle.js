!function(){"use strict";var r={402:function(r,n,e){var t=e(537),o=e.n(t),i=e(645),a=e.n(i)()(o());a.push([r.id,"* {\r\n  box-sizing: border-box;\r\n  font-family: 'open sans';\r\n}\r\n\r\n.container {\r\n  position: relative;\r\n  display: grid;\r\n  width: 800px;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  background-color: rgb(130, 38, 235);\r\n  border-radius: 10px;\r\n}\r\n\r\nh3 {\r\n  margin: 10px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.list {\r\n  height: fit-content;\r\n  background-color: rgb(230, 226, 231);\r\n  margin: 5px;\r\n  border-radius: 10px;\r\n}\r\n\r\nul, li {\r\n  margin: 0;\r\n  padding: 0;\r\n  list-style: none;\r\n}\r\n\r\n.card {\r\n  height: fit-content;\r\n  background-color: rgb(230, 226, 231);\r\n  margin: 5px;\r\n  border-radius: 10px;\r\n}\r\n\r\n.item {\r\n  padding: 20px 10px;\r\n  box-sizing: border-box;\r\n  font-size: 20px;\r\n  color:  rgb(41, 41, 41);\r\n  margin-bottom: 10px;\r\n  border-radius: 5px;\r\n  background-color: #fff;\r\n  box-shadow: 0px 2px 1px rgba(0,0,0,0.3);\r\n  position: relative;\r\n}\r\n\r\n.item:hover {\r\n  cursor: default;\r\n}\r\n\r\n.item:active {\r\n  cursor: grabbing;\r\n  transform: rotate(-2deg);\r\n}\r\n\r\n.item__delete {\r\n  position: absolute;\r\n  right: 5px;\r\n  top: 5px;\r\n  width: 20px;\r\n  height: 20px;\r\n  background-color: rgb(200, 200, 200);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: flex-end;\r\n  border-radius: 5px;\r\n  opacity: 0;\r\n}\r\n\r\n.item__delete:hover,\r\n.item__delete:active {\r\n  opacity: 1;\r\n  cursor: pointer;\r\n}\r\n\r\n.item__delete:active {\r\n  background-color: rgb(170, 170, 170);\r\n}\r\n\r\n.title {\r\n  margin: 10px;\r\n  color: rgb(94, 94, 94);\r\n}\r\n\r\n.addCard {\r\n  font-weight: 700;\r\n  font-size: 20px;\r\n  color: rgb(94, 94, 94);\r\n  margin-left: 5px;\r\n}\r\n\r\n.addCard:first-child:hover {\r\n  cursor: default;\r\n}\r\n\r\n.addCard:last-child:hover {\r\n  cursor: pointer;\r\n  border-bottom: 1px solid rgb(94, 94, 94);\r\n}\r\n\r\n.new-task {\r\n  margin: 10px;\r\n}\r\n\r\n.new-task__content {\r\n  width: 100%;\r\n  min-height: 50px;\r\n  border: none;\r\n  border-radius: 3px;\r\n  resize: none;\r\n}\r\n\r\n.new-task__controls {\r\n  display: flex;\r\n  padding: 5px;\r\n  margin-top: 10px;\r\n}\r\n\r\n.new-task__add {\r\n  background-color: rgb(69, 223, 55);\r\n  color: #fff;\r\n  font-weight: bold;\r\n  border: none;\r\n  border-radius: 3px;\r\n  width: 100px;\r\n  height: 40px;\r\n  cursor: pointer;\r\n}\r\n\r\n.new-task__add:hover {\r\n  background-color: rgb(95, 230, 95);\r\n}\r\n\r\n.new-task__cancel {\r\n  margin-left: 10px;\r\n  font-size: 30px;\r\n  align-self: center;\r\n  cursor: pointer;\r\n}\r\n\r\n.new-task__cancel:hover {\r\n  font-weight: bold;\r\n}\r\n\r\n.dragged {\r\n  width: 250px;\r\n  border-radius: 5px;\r\n  z-index: 999;\r\n  pointer-events: none;\r\n  background-color: #fff;\r\n  cursor: grabbing;\r\n  cursor: -moz-grabbing;\r\n  cursor: -webkit-grabbing;\r\n}\r\n","",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"AAAA;EACE,sBAAsB;EACtB,wBAAwB;AAC1B;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,YAAY;EACZ,qCAAqC;EACrC,mCAAmC;EACnC,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;EACnB,oCAAoC;EACpC,WAAW;EACX,mBAAmB;AACrB;;AAEA;EACE,SAAS;EACT,UAAU;EACV,gBAAgB;AAClB;;AAEA;EACE,mBAAmB;EACnB,oCAAoC;EACpC,WAAW;EACX,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;EAClB,sBAAsB;EACtB,eAAe;EACf,uBAAuB;EACvB,mBAAmB;EACnB,kBAAkB;EAClB,sBAAsB;EACtB,uCAAuC;EACvC,kBAAkB;AACpB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,gBAAgB;EAChB,wBAAwB;AAC1B;;AAEA;EACE,kBAAkB;EAClB,UAAU;EACV,QAAQ;EACR,WAAW;EACX,YAAY;EACZ,oCAAoC;EACpC,aAAa;EACb,uBAAuB;EACvB,qBAAqB;EACrB,kBAAkB;EAClB,UAAU;AACZ;;AAEA;;EAEE,UAAU;EACV,eAAe;AACjB;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,YAAY;EACZ,sBAAsB;AACxB;;AAEA;EACE,gBAAgB;EAChB,eAAe;EACf,sBAAsB;EACtB,gBAAgB;AAClB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,eAAe;EACf,wCAAwC;AAC1C;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,WAAW;EACX,gBAAgB;EAChB,YAAY;EACZ,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,gBAAgB;AAClB;;AAEA;EACE,kCAAkC;EAClC,WAAW;EACX,iBAAiB;EACjB,YAAY;EACZ,kBAAkB;EAClB,YAAY;EACZ,YAAY;EACZ,eAAe;AACjB;;AAEA;EACE,kCAAkC;AACpC;;AAEA;EACE,iBAAiB;EACjB,eAAe;EACf,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,YAAY;EACZ,kBAAkB;EAClB,YAAY;EACZ,oBAAoB;EACpB,sBAAsB;EACtB,gBAAgB;EAChB,qBAAqB;EACrB,wBAAwB;AAC1B",sourcesContent:["* {\r\n  box-sizing: border-box;\r\n  font-family: 'open sans';\r\n}\r\n\r\n.container {\r\n  position: relative;\r\n  display: grid;\r\n  width: 800px;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  background-color: rgb(130, 38, 235);\r\n  border-radius: 10px;\r\n}\r\n\r\nh3 {\r\n  margin: 10px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.list {\r\n  height: fit-content;\r\n  background-color: rgb(230, 226, 231);\r\n  margin: 5px;\r\n  border-radius: 10px;\r\n}\r\n\r\nul, li {\r\n  margin: 0;\r\n  padding: 0;\r\n  list-style: none;\r\n}\r\n\r\n.card {\r\n  height: fit-content;\r\n  background-color: rgb(230, 226, 231);\r\n  margin: 5px;\r\n  border-radius: 10px;\r\n}\r\n\r\n.item {\r\n  padding: 20px 10px;\r\n  box-sizing: border-box;\r\n  font-size: 20px;\r\n  color:  rgb(41, 41, 41);\r\n  margin-bottom: 10px;\r\n  border-radius: 5px;\r\n  background-color: #fff;\r\n  box-shadow: 0px 2px 1px rgba(0,0,0,0.3);\r\n  position: relative;\r\n}\r\n\r\n.item:hover {\r\n  cursor: default;\r\n}\r\n\r\n.item:active {\r\n  cursor: grabbing;\r\n  transform: rotate(-2deg);\r\n}\r\n\r\n.item__delete {\r\n  position: absolute;\r\n  right: 5px;\r\n  top: 5px;\r\n  width: 20px;\r\n  height: 20px;\r\n  background-color: rgb(200, 200, 200);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: flex-end;\r\n  border-radius: 5px;\r\n  opacity: 0;\r\n}\r\n\r\n.item__delete:hover,\r\n.item__delete:active {\r\n  opacity: 1;\r\n  cursor: pointer;\r\n}\r\n\r\n.item__delete:active {\r\n  background-color: rgb(170, 170, 170);\r\n}\r\n\r\n.title {\r\n  margin: 10px;\r\n  color: rgb(94, 94, 94);\r\n}\r\n\r\n.addCard {\r\n  font-weight: 700;\r\n  font-size: 20px;\r\n  color: rgb(94, 94, 94);\r\n  margin-left: 5px;\r\n}\r\n\r\n.addCard:first-child:hover {\r\n  cursor: default;\r\n}\r\n\r\n.addCard:last-child:hover {\r\n  cursor: pointer;\r\n  border-bottom: 1px solid rgb(94, 94, 94);\r\n}\r\n\r\n.new-task {\r\n  margin: 10px;\r\n}\r\n\r\n.new-task__content {\r\n  width: 100%;\r\n  min-height: 50px;\r\n  border: none;\r\n  border-radius: 3px;\r\n  resize: none;\r\n}\r\n\r\n.new-task__controls {\r\n  display: flex;\r\n  padding: 5px;\r\n  margin-top: 10px;\r\n}\r\n\r\n.new-task__add {\r\n  background-color: rgb(69, 223, 55);\r\n  color: #fff;\r\n  font-weight: bold;\r\n  border: none;\r\n  border-radius: 3px;\r\n  width: 100px;\r\n  height: 40px;\r\n  cursor: pointer;\r\n}\r\n\r\n.new-task__add:hover {\r\n  background-color: rgb(95, 230, 95);\r\n}\r\n\r\n.new-task__cancel {\r\n  margin-left: 10px;\r\n  font-size: 30px;\r\n  align-self: center;\r\n  cursor: pointer;\r\n}\r\n\r\n.new-task__cancel:hover {\r\n  font-weight: bold;\r\n}\r\n\r\n.dragged {\r\n  width: 250px;\r\n  border-radius: 5px;\r\n  z-index: 999;\r\n  pointer-events: none;\r\n  background-color: #fff;\r\n  cursor: grabbing;\r\n  cursor: -moz-grabbing;\r\n  cursor: -webkit-grabbing;\r\n}\r\n"],sourceRoot:""}]),n.Z=a},645:function(r){r.exports=function(r){var n=[];return n.toString=function(){return this.map((function(n){var e="",t=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),t&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=r(n),t&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(r,e,t,o,i){"string"==typeof r&&(r=[[null,r,void 0]]);var a={};if(t)for(var s=0;s<this.length;s++){var A=this[s][0];null!=A&&(a[A]=!0)}for(var c=0;c<r.length;c++){var d=[].concat(r[c]);t&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),e&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=e):d[2]=e),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},537:function(r){r.exports=function(r){var n=r[1],e=r[3];if(!e)return n;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),i="/*# ".concat(o," */"),a=e.sources.map((function(r){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(r," */")}));return[n].concat(a).concat([i]).join("\n")}return[n].join("\n")}},379:function(r){var n=[];function e(r){for(var e=-1,t=0;t<n.length;t++)if(n[t].identifier===r){e=t;break}return e}function t(r,t){for(var i={},a=[],s=0;s<r.length;s++){var A=r[s],c=t.base?A[0]+t.base:A[0],d=i[c]||0,l="".concat(c," ").concat(d);i[c]=d+1;var u=e(l),p={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==u)n[u].references++,n[u].updater(p);else{var g=o(p,t);t.byIndex=s,n.splice(s,0,{identifier:l,updater:g,references:1})}a.push(l)}return a}function o(r,n){var e=n.domAPI(n);return e.update(r),function(n){if(n){if(n.css===r.css&&n.media===r.media&&n.sourceMap===r.sourceMap&&n.supports===r.supports&&n.layer===r.layer)return;e.update(r=n)}else e.remove()}}r.exports=function(r,o){var i=t(r=r||[],o=o||{});return function(r){r=r||[];for(var a=0;a<i.length;a++){var s=e(i[a]);n[s].references--}for(var A=t(r,o),c=0;c<i.length;c++){var d=e(i[c]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}i=A}}},569:function(r){var n={};r.exports=function(r,e){var t=function(r){if(void 0===n[r]){var e=document.querySelector(r);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(r){e=null}n[r]=e}return n[r]}(r);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}},216:function(r){r.exports=function(r){var n=document.createElement("style");return r.setAttributes(n,r.attributes),r.insert(n,r.options),n}},565:function(r,n,e){r.exports=function(r){var n=e.nc;n&&r.setAttribute("nonce",n)}},795:function(r){r.exports=function(r){var n=r.insertStyleElement(r);return{update:function(e){!function(r,n,e){var t="";e.supports&&(t+="@supports (".concat(e.supports,") {")),e.media&&(t+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(t+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),t+=e.css,o&&(t+="}"),e.media&&(t+="}"),e.supports&&(t+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(t,r,n.options)}(n,r,e)},remove:function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(n)}}}},589:function(r){r.exports=function(r,n){if(n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}}},n={};function e(t){var o=n[t];if(void 0!==o)return o.exports;var i=n[t]={id:t,exports:{}};return r[t](i,i.exports,e),i.exports}e.n=function(r){var n=r&&r.__esModule?function(){return r.default}:function(){return r};return e.d(n,{a:n}),n},e.d=function(r,n){for(var t in n)e.o(n,t)&&!e.o(r,t)&&Object.defineProperty(r,t,{enumerable:!0,get:n[t]})},e.o=function(r,n){return Object.prototype.hasOwnProperty.call(r,n)},e.nc=void 0,function(){function r(){const r=document.querySelector("body").innerHTML;window.localStorage.setItem("state",JSON.stringify(r))}var n=e(379),t=e.n(n),o=e(795),i=e.n(o),a=e(569),s=e.n(a),A=e(565),c=e.n(A),d=e(216),l=e.n(d),u=e(589),p=e.n(u),g=e(402),E={};E.styleTagTransform=p(),E.setAttributes=c(),E.insert=s().bind(null,"head"),E.domAPI=i(),E.insertStyleElement=l(),t()(g.Z,E),g.Z&&g.Z.locals&&g.Z.locals,(new class{constructor(){this.originList=null,this.originPrevElSibling=null,this.pageEvents=document.querySelector(".container")}init(){const r=function(){try{return JSON.parse(localStorage.getItem("state"))}catch(r){throw new Error("Error to load")}}();r&&(document.body.innerHTML=r),this.pageEvents.addEventListener("click",(r=>this.onAddTask(r))),this.pageEvents.addEventListener("mouseover",(r=>this.onMouseOver(r))),this.pageEvents.addEventListener("mouseout",(r=>this.onMouseOut(r))),this.pageEvents.addEventListener("mousedown",(r=>this.onMouseDown(r))),this.pageEvents.addEventListener("mouseup",(r=>this.onMouseUp(r)))}onAddTask(n){if(n.target.classList.contains("addCard")){const e=document.querySelector(".new-task");if(e){const r=e.parentElement;e.remove(),r.insertAdjacentHTML("beforeEnd",this.addButton())}const t=n.target.closest(".card");n.target.remove(),t.insertAdjacentHTML("beforeEnd",this.newTaskForm());const o=t.querySelector(".new-task"),i=t.querySelector(".list"),a=o.querySelector(".new-task__add"),s=o.querySelector(".new-task__cancel"),A=o.querySelector(".new-task__content");A.removeAttribute("readonly"),a.addEventListener("click",(()=>{o.remove(),i.insertAdjacentHTML("beforeEnd",this.newItem(A.value)),i.insertAdjacentHTML("afterEnd",this.addButton()),r()})),s.addEventListener("click",(()=>{o.remove(),i.insertAdjacentHTML("afterEnd",this.addButton())}))}}newItem(r){return`\n    <li class="item" draggable="true">${r}\n      <span class="item__delete hidden">×</span>\n    </li>`}newTaskForm(){return"\n    <div class='new-task'>\n      <textarea class='new-task__content' placeholder='Pls type your task here...' required></textarea>\n      <div class='new-task__controls'>\n        <button class='new-task__add'>Add Card</button>\n        <div class='new-task__cancel'>×</div>\n      </div>\n    </div>"}addButton(){return'\n    <div class="addCard">+ Add another card</div>'}onMouseOver(r){const n=r.target.closest(".item");n&&n.querySelector(".item__delete").classList.contains("hidden")&&n.querySelector(".item__delete").classList.remove("hidden")}onMouseOut(r){const n=r.target.closest(".item");n&&!n.querySelector(".item__delete").classList.contains("hidden")&&n.querySelector(".item__delete").classList.add("hidden")}onMouseDown(n){if(!n.target.classList.contains("new-task_content"))if(n.target.classList.contains("addCard"))this.pageEvents.addEventListener("click",(r=>this.onDeleteTask(r)));else{if(n.target.classList.contains("item__delete"))return n.target.closest(".item").remove(),void r();n.preventDefault(),this.currentItem=n.target.closest(".item"),this.originList=this.currentItem.parentElement,this.originPrevElSibling=this.currentItem.previousElementSibling,this.currentItem&&(this.currentItem.classList.add("dragged"),this.pageEvents.addEventListener("mousemove",this.drag),this.pageEvents.addEventListener("mouseup",this.dragEnd),[...document.querySelectorAll(".card")].forEach((r=>{r.addEventListener("mouseup",this.itemDragEnd)})))}}onMouseUp(r){r.preventDefault()}onDeleteTask(n){n.target.classList.contains("item__delete")&&(n.target.closest(".item").remove(),r())}drag(r){this.currentItem=document.querySelector(".dragged"),this.currentItem&&(this.currentItem.style.position="absolute",this.currentItem.style.left=r.clientX-20+"px",this.currentItem.style.top=r.clientY-20+"px")}dragEnd(){const n=document.querySelector(".dragged");n&&(n.classList.remove("dragged"),this.pageEvents.removeEventListener("mousemove",this.drag),this.pageEvents.removeEventListener("mouseup",this.dragEnd),r())}itemDragEnd(n){const e=document.querySelector(".dragged");if(!e)return;const t=this.querySelector(".list");t?t.insertBefore(e,n.target.closest(".item")):this.originList.insertBefore(e,this.originPrevElSibling),e.classList.remove("dragged"),e.style="",r()}}).init()}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,